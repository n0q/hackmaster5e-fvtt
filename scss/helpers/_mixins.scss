@use "colors";
@use "variables";

@mixin element-invisible {
  position: absolute;

  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;

  clip: rect(0 0 0 0);
  overflow: hidden;
}

@mixin hide { display: none !important; }

@mixin border_rounded {
    border: 2px solid;
    border-radius: 6px;
}

@mixin common_border {
    border: 1px solid #999;
    padding: 5px;
}

@mixin flexgrid {
    .row {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .column {
        justify-content: flex-end;
        flex-basis: content;
        flex: 1;
    }
}

@mixin card-border-left ($_border-radius) {
    border: transparent;
    -webkit-border-radius: #{$_border-radius};
    -webkit-border-top-right-radius: 0;
    -webkit-border-bottom-right-radius: 0;
    -moz-border-radius: #{$_border-radius};
    -moz-border-top-right-radius: 0;
    -moz-border-bottom-right-radius: 0;
     border-radius: #{$_border-radius};
     border-top-right-radius: 0;
     border-bottom-right-radius: 0;
     margin: -(variables.$card_border);
     margin-right: inherit;
 }

@mixin button-border ($_border-radius) {
    background: black;
    border: 2px solid;
    -webkit-border-radius: #{$_border-radius};
    -moz-border-radius: #{$_border-radius};
    border-radius: #{$_border-radius};
    &:hover {
        border-color: colors.$c-orange;
        box-shadow: 0 0 2px colors.$c-orange;
        &:active {
            padding: 2px;
            background: black;
        }
    }
}

$dogear-size: 10px;
@mixin table-basic {
    table {
        table-layout: fixed;
        width: auto;
        border-collapse: collapse;
        border: none;
        height: 0;
        min-height: auto;

        th {
            padding: 2px;
        }

        td {
            padding: 2px;
            text-align: right;

            &.dogear {
                position: relative;
            }

            &.dogear .marker {
                position: absolute;
                inset: 0 auto auto 0;
                width: $dogear-size;
                height: $dogear-size;
            }

            &.dogear::after {
                content: "";
                position: absolute;
                inset: 0 auto auto 0;
                border-style: solid;
                border-width: $dogear-size $dogear-size 0 0;
                border-color: currentColor transparent transparent transparent;
                pointer-events: none;
                opacity: 0.5;
            }
        }

        select {
            height: 18px;
        }

        .button {
            cursor: pointer;
        }

        .button[disabled] {
            cursor: default;
            color: var(--color-text-dark-inactive);
            &:hover { @include text-glow('reset'); }
        }

        .max-width {
            display: block;
            overflow: hidden;

            >input[type] {
                width: 100%;
                box-sizing: border-box;
            }
        }

        input[type=text], 
        input[type=number] {
            height: 16px;
            text-align: right;
        }

        input[type=text] {
            &[data-dtype="Number"] { width: 2em; }
            &[data-dtype="String"] { width: 6em; }
        }

         input:read-only {
            border: 0;
            background: none;
        }
    }
}

@mixin text-glow($_textShadow: colors.$shad-red,) {
    @if $_textShadow == 'reset' {
        font-weight: initial;
        text-shadow: initial;
    } @else {
        font-weight: bold;
        text-shadow: $_textShadow;
        transition: text-shadow 0.25s;
    }
}
